{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableBody","props","rows","employeeListData","map","currentEmp","index","react_default","a","createElement","key","name","job","email","department","location","className","onClick","removeEmployee","Table","_this$props","this","style","width","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","validateField","onFormSubmit","preventDefault","handleSubmit","state","initialState","formErrors","emailValid","nameValid","jobValid","departmentValid","locationValid","formValid","fieldName","fieldValidationErrors","RegExp","test","length","validateForm","_this$state","border","padding","marginBottom","onSubmit","type","placeholder","onChange","id","disabled","App","employeeList","filter","i","concat","toConsumableArray","src_Form","src_Table","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a41d5244.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nconst TableBody = props => {\r\n  const rows = props.employeeListData.map((currentEmp,index) => {\r\n    return(\r\n      <tr key={index}>\r\n        <td>{currentEmp.name}</td>\r\n        <td>{currentEmp.job}</td>\r\n        <td>{currentEmp.email}</td>\r\n        <td>{currentEmp.department}</td>\r\n        <td>{currentEmp.location}</td>\r\n        <td className=\"text-center\"><button className=\"btn btn-danger btn-delete\" onClick={() => props.removeEmployee(index)}>X</button></td>\r\n      </tr>\r\n    );\r\n  });\r\n  return (\r\n    <tbody>\r\n      {rows}\r\n    </tbody>\r\n  );\r\n}\r\n\r\nclass Table extends Component {\r\n  render(){\r\n    const {employeeListData, removeEmployee} = this.props\r\n    return(\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th style={{width:'300px'}}>Name</th>\r\n            <th style={{width:'450px'}}>Job</th>\r\n            <th style={{width:'450px'}}>Email Id</th>\r\n            <th style={{width:'450px'}}>Department</th>\r\n            <th style={{width:'450px'}}>Location</th>\r\n            <th style={{width:'100px'}}>Remove</th>\r\n          </tr>\r\n        </thead>\r\n        <TableBody employeeListData={employeeListData} removeEmployee={removeEmployee} />\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            name: '',\r\n            job: '',\r\n            email:'',\r\n            department:'',\r\n            location:'',\r\n\r\n            formErrors: {\r\n                  name: '',\r\n                  job: '',\r\n                  email:'',\r\n                  department:'',\r\n                  location:'',\r\n            },\r\n            emailValid: false,\r\n            nameValid: false,\r\n            jobValid: false,\r\n            departmentValid: false,\r\n            locationValid: false,\r\n            formValid: false\r\n        };\r\n\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({[name]: value},\r\n                      () => { this.validateField(name, value) });\r\n    }\r\n\r\n    validateField(fieldName, value) {\r\n      let fieldValidationErrors = this.state.formErrors;\r\n      let emailValid = this.state.emailValid;\r\n      let nameValid = this.state.nameValid;\r\n      let jobValid = this.state.jobValid;\r\n      let departmentValid = this.state.departmentValid;\r\n      let locationValid = this.state.jobValid;\r\n\r\n      switch(fieldName) {\r\n\r\n        case 'name':\r\n          let nameExp = RegExp(/^[a-zA-Z\\s]+$/);\r\n          nameValid = nameExp.test(value);\r\n          if(nameValid){\r\n            nameValid = value.length>2;\r\n            fieldValidationErrors.name = nameValid ? '': 'minimum 3 characters required and letter only';\r\n          }\r\n          else{\r\n            fieldValidationErrors.name = 'Use letter only';\r\n          }\r\n          break;\r\n\r\n        case 'email':\r\n          let emailExp = RegExp(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\r\n          emailValid = emailExp.test(value);\r\n          fieldValidationErrors.email = emailValid ? '' : 'Email is invalid';\r\n          break;\r\n\r\n        case 'job':\r\n            jobValid = value.length>1;\r\n            fieldValidationErrors.job = jobValid ? '': 'minimum 2 characters required';\r\n          break;\r\n\r\n\r\n        case 'department':\r\n          departmentValid = value.length>1;\r\n          fieldValidationErrors.department = departmentValid ? '': 'minimum 2 characters required';\r\n        break;\r\n\r\n        case 'location':\r\n          locationValid = value.length>1;\r\n          fieldValidationErrors.location = locationValid ? '': 'minimum 2 characters required';\r\n        break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n      this.setState({formErrors: fieldValidationErrors,\r\n                      emailValid: emailValid,\r\n                      jobValid: jobValid,\r\n                      departmentValid: departmentValid,\r\n                      locationValid: locationValid,\r\n                      nameValid: nameValid\r\n                    }, this.validateForm);\r\n    }\r\n\r\n    validateForm() {\r\n      this.setState({formValid: this.state.nameValid && this.state.jobValid && this.state.emailValid && this.state.departmentValid && this.state.locationValid});\r\n\r\n        // if(this.state.formValid){\r\n        //   let btn= document.getElementById('submit_btn');\r\n        //   btn.style.background = \"#0250bc\";\r\n        //   btn.style.borderColor = \"#0250bc\";\r\n        //   btn.innerHTML = \"Submit\";\r\n        //   console.log(\"valid\")\r\n        // }\r\n        // if(!this.state.formValid){\r\n        //   console.log(\"no valid\")\r\n        //   let btn= document.getElementById('submit_btn');\r\n        //   btn.style.background = \"grey\";\r\n        //   btn.style.borderColor = \"grey\";\r\n        //   btn.innerHTML = \"Disable\";\r\n        // }\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    render() {\r\n        const { name, job, email, department, location } = this.state;\r\n        const { formErrors } = this.state;\r\n        const myFormStyle = {border:'1px solid #e4e4e4', padding:'15px 20px 5px', marginBottom:'30px'}\r\n\r\n          // console.log(\"Name: \", this.state.nameValid);\r\n          // console.log(\"Depart: \", this.state.departmentValid);\r\n          // console.log(\"email: \", this.state.emailValid);\r\n          // console.log(\"locatiob: \", this.state.locationValid);\r\n          // console.log(\"job: \", this.state.jobValid);\r\n\r\n        return (\r\n        <div>\r\n            {/* <FormErrors className=\"form-error\" formErrors={this.state.formErrors} /> */}\r\n            <div className=\"error-message\">All fields are required!</div>\r\n            <form style={myFormStyle} onSubmit={this.onFormSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    placeholder=\"Enter Name\"\r\n                    onChange={this.handleChange} />\r\n                    <div className=\"error-message\">{formErrors.name}</div>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"job\"\r\n                    value={job}\r\n                    placeholder=\"Enter Job Designation\"\r\n                    onChange={this.handleChange} />\r\n                    <div className=\"error-message\">{formErrors.job}</div>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    value={email}\r\n                    placeholder=\"Enter Email ID\"\r\n                    onChange={this.handleChange} />\r\n                    <div className=\"error-message\">{formErrors.email}</div>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"department\"\r\n                    value={department}\r\n                    placeholder=\"Enter Department\"\r\n                    onChange={this.handleChange} />\r\n                    <div className=\"error-message\">{formErrors.department}</div>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"location\"\r\n                    value={location}\r\n                    placeholder=\"Enter Location\"\r\n                    onChange={this.handleChange} />\r\n                    <div className=\"error-message\">{formErrors.location}</div>\r\n\r\n                <button id=\"submit_btn\" type=\"submit\" disabled={!this.state.formValid}>\r\n                    Submit\r\n                </button>\r\n            </form>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport './index.css';\nimport Table from \"./Table\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n  state = {\n    employeeList : [\n                    {\n                      'name':'Ajay',\n                      'job':'Developer',\n                      'email':'ajay@xyz.com',\n                      'department':'IT',\n                      'location':'Noida'\n                    },\n                    {\n                      'name':'Suraj',\n                      'job':'Auditor',\n                      'email':'suraj@xyz.com',\n                      'department':'Account',\n                      'location':'Gurugram'\n                    },\n                    {\n                      'name':'Manish',\n                      'job':'Executive',\n                      'email':'manish@xyz.com',\n                      'department':'Sales',\n                      'location':'Delhi'\n                    }\n                  ]\n    } //state end\n\n    removeEmployee = index => {\n        const {employeeList} = this.state;\n\n        this.setState({\n            employeeList: employeeList.filter((currentEmp, i) => {\n                return i !== index;\n            })\n        });\n    }\n\n    handleSubmit = currentEmp => {\n        this.setState({employeeList: [...this.state.employeeList, currentEmp]});\n    }\n\n  render() {\n      const {employeeList} = this.state;\n\n    return (\n        <div className=\"container\">\n          <h1 className=\"display-4\">Employee Details ReactJs Form</h1>\n          <Form handleSubmit={this.handleSubmit} />\n          <Table employeeListData={employeeList} removeEmployee={this.removeEmployee} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}