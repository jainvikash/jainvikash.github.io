{"version":3,"sources":["comps/Header.js","comps/Company.js","comps/CompaniesList.js","comps/CompanyDetails.js","comps/Add.js","comps/CompanyManagement.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","title","React","Component","Company","onCompClick","e","onCompRemove","stopPropagation","style","backgroundColor","bgc","onClick","onCompanyClick","bind","onCompanyRemove","name","CompaniesList","i","companies","map","companyItem","Company_Company","key","CompanyDetails","currentCompany","desc","Add","onAdd","refs","cn","value","cd","ref","type","placeholder","add","CompanyManagement","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedCompany","newComp","Math","floor","random","toString","push","setState","splice","length","Add_Add","handleAdd","CompaniesList_CompaniesList","handleCompanyClick","handleCompanyRemove","CompanyDetails_CompanyDetails","App","Header_Header","CompanyManagement_CompanyManagement","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0d03daf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron text-center\">        \r\n\t\t\t<h1>{this.props.title}</h1>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Company extends React.Component {\r\n\t\r\n\tonCompanyClick(){\r\n\t\tthis.props.onCompClick();\r\n\t}\r\n\t\r\n\tonCompanyRemove(e){\r\n\t\tthis.props.onCompRemove();\r\n\t\te.stopPropagation();\t\t//it prevent to clicking the parent container. e is clicking event of child/parent\r\n\t}\r\n\t\r\n  render() {\r\n    return (\r\n      \r\n\t\t<div className=\"companyStyle\" style={{backgroundColor:this.props.bgc}} onClick={this.onCompanyClick.bind(this)}>\r\n\t\t\t<button className=\"btn btn-danger right\" onClick={this.onCompanyRemove.bind(this)}>Remove</button>\r\n\t\t\t<br/><br/>\r\n\t\t\t<h2>{this.props.name}</h2>\r\n\t\t</div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Company from './Company.js';\r\n\r\nexport default class CompaniesList extends React.Component {\r\n\t\r\n\tonCompanyClick(i){\r\n\t\tthis.props.onCompanyClick(i);\r\n\t}\r\n\tonCompanyRemove(i){\r\n\t\tthis.props.onCompanyRemove(i);\r\n\t}\r\n\t\r\n  render() {\r\n    return (\r\n      <div className=\"marginZero row\">\r\n        \t{this.props.companies.map(function(companyItem, i){\r\n\t\t\t\treturn <Company key={i} name={companyItem.name} \r\n\t\t\t\t\t\tbgc={companyItem.bgc} \r\n\t\t\t\t\t\tonCompClick={this.onCompanyClick.bind(this,i)} \r\n\t\t\t\t\t\tonCompRemove={this.onCompanyRemove.bind(this,i)} />\r\n\t\t\t},this)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CompanyDetails extends React.Component {\r\n  render() {\r\n    return (\r\n      \r\n\t\t<div className=\"companyDetailsStyle\" style={{backgroundColor:this.props.currentCompany.bgc}}>\r\n\t\t\t<h1>{this.props.currentCompany.name}</h1>\r\n\t\t\t<h4>{this.props.currentCompany.desc}</h4>\r\n\t\t</div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Add extends React.Component {\r\n\t\r\n\tadd(){\r\n\t\tthis.props.onAdd(this.refs.cn.value, this.refs.cd.value);\r\n\t\tthis.refs.cn.value = \"\";\r\n\t\tthis.refs.cd.value = \"\";\r\n\t}\r\n\t\r\n  render() {\r\n    return (\r\n      <div className=\"row marginZero justify-content-center align-items-center\">\r\n\t\t<div className=\"col-md-3\">\r\n\t\t\t<input ref=\"cn\" type=\"text\" className=\"form-control\" placeholder=\"Enter Company Name\" />\r\n\t\t</div>\r\n\t\t<div className=\"col-md-4\">\r\n        \t<input ref=\"cd\" type=\"text\" className=\"form-control\" placeholder=\"Enter Company Name\" />\r\n\t\t</div>\r\n\t\t\t<button className=\"btn btn-success\" onClick={this.add.bind(this)}>Add</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport CompaniesList from './CompaniesList.js';\r\nimport CompanyDetails from './CompanyDetails.js';\r\nimport Add from './Add.js';\r\n\r\nexport default class CompanyManagement extends React.Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcompanies:[\r\n\t\t\t\t//{name:'Google',desc:'Web Search', bgc:'#10ADE3'},\r\n\t\t\t\t//{name:'Microsoft',desc:'Software', bgc:'#61C43E'},\r\n\t\t\t\t//{name:'NetApp',desc:'Storage', bgc:'#E8E915'}\r\n\t\t\t],\r\n\t\t\tselectedCompany:{}\r\n\t\t};\r\n\t}\t\r\n\t\r\n\thandleAdd(name, desc){\r\n\t\tlet newComp = {name:name, desc:desc, bgc:'#'+Math.floor(Math.random()*0xffffff).toString(16)};\r\n\t\tlet companies = this.state.companies;\r\n\t\tcompanies.push(newComp);\r\n\t\tthis.setState({companies});\r\n\t}\t\r\n\r\n\t\r\n\thandleCompanyClick(i){\r\n\t\t//console.log(i);\r\n\t\tlet selectedCompany = this.state.companies[i];\r\n\t\tthis.setState({selectedCompany}); //selectedCompany:selectedCompany\r\n\t}\r\n\thandleCompanyRemove(i){\r\n\t\t//console.log(i);\r\n\t\tlet companies = this.state.companies;\r\n\t\tcompanies.splice(i,1);\r\n\t\tlet selectedCompany;\r\n\t\tif(companies.length > 0)\r\n\t\t\t{\r\n\t\t\t\tselectedCompany = companies[0];\r\n\t\t\t}\r\n\t\telse{\r\n\t\t\tselectedCompany = {};\r\n\t\t\t}\r\n\t\tthis.setState({companies,selectedCompany});\r\n\t}\r\n\t\r\n  render() {\r\n    return (\r\n      <div>\r\n\t\t\r\n\t\t<Add onAdd={this.handleAdd.bind(this)} />\r\n\t\t\r\n\t\t<CompaniesList companies={this.state.companies} onCompanyClick={this.handleCompanyClick.bind(this)} onCompanyRemove={this.handleCompanyRemove.bind(this)} />\r\n\t\t\t\r\n\t\t<CompanyDetails currentCompany={this.state.selectedCompany} />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './comps/Header.js';\r\nimport CompanyManagement from './comps/CompanyManagement.js';\r\n\r\nexport default class App extends React.Component {\r\n\r\n\t\r\n  render() {\r\n    return (\r\n      <div>\r\n\t\t<Header title=\"Company Management Console ReactJs App\" />\r\n\t\t<CompanyManagement/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}